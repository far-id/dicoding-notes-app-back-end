CLIENT http://notesapp-v1.dicodingacademy.com/

## KRITERIA 1 ## (create)

struktur object yang perlu disimpan dalam array{
 id: string,
 title: string,
 createdAt: string,
 updatedAt: string,
 tags: array of string,
 body: string,
},

contoh {
 id: 'notes-V1StGXR8_Z5jdHi6B-myT',
 title: 'Sejarah JavaScript',
 createdAt: '2020-12-23T23:00:09.686Z',
 updatedAt: '2020-12-23T23:00:09.686Z',
 tags: ['NodeJS', 'JavaScript'],
 body: 'JavaScript pertama kali dikembangkan oleh Brendan Eich dari Netscape di bawah nama Mocha, yang nantinya namanya diganti menjadi LiveScript, dan akhirnya menjadi JavaScript. Navigator sebelumnya telah mendukung Java untuk lebih bisa dimanfaatkan para pemrogram yang non-Java.',
},


route dengan path ‘/notes’ dan method POST. 

body dari client{
 "title": "Judul Catatan",
 "tags": ["Tag 1", "Tag 2"],
 "body": "Konten catatan"
}

jika berhasil membuat catatan status code 201(created) dan response {
  "status": "success",
  "message": "Catatan berhasil ditambahkan",
  "data": {
    "noteId": "V09YExygSUYogwWJ"
  }
}
noteId dari id uniq

jika gagal 500 {
  "status": "error",
  "message": "Catatan gagal untuk ditambahkan"
}


## KRITERIA 2 ## (read)

url /notes’ dengan method ‘GET’, 

mengembalikan 200 {
  "status": "success",
  "data": {
    "notes": [
      {
        "id":"notes-V1StGXR8_Z5jdHi6B-myT",
        "title":"Catatan 1",
        "createdAt":"2020-12-23T23:00:09.686Z",
        "updatedAt":"2020-12-23T23:00:09.686Z",
        "tags":[
          "Tag 1",
          "Tag 2"
        ],
        "body":"Isi dari catatan 1"
      },
      {
        "id":"notes-V1StGXR8_98apmLk3mm1",
        "title":"Catatan 2",
        "createdAt":"2020-12-23T23:00:09.686Z",
        "updatedAt":"2020-12-23T23:00:09.686Z",
        "tags":[
          "Tag 1",
          "Tag 2"
        ],
        "body":"Isi dari catatan 2"
      }
    ]
  }
}

jika data kosong 200{
  "status": "success",
  "data": {
    "notes": []
  }
}

melihat catatan spesifik
path ‘/notes/{id}’ dengan method ‘GET’
status 200{
  "status": "success",
  "data": {
    "note": {
      "id":"notes-V1StGXR8_Z5jdHi6B-myT",
      "title":"Catatan 1",
      "createdAt":"2020-12-23T23:00:09.686Z",
      "updatedAt":"2020-12-23T23:00:09.686Z",
      "tags":[
        "Tag 1",
        "Tag 2"
      ],
      "body":"Isi dari catatan 1"
    }
}

jika id tidak ada 404{
  "status": "fail",
  "message": "Catatan tidak ditemukan"
}


## KRITERIA 3 ## (edit)

path ‘/notes/{id}’, menggunakan method ‘PUT’

dari client{
  "title":"Judul Catatan Revisi",
  "tags":[
    "Tag 1",
    "Tag 2"
  ],
  "body":"Konten catatan"
}

response 200{
  "status": "success",
  "message": "Catatan berhasil diperbaharui"
}

jika id tidak ada 404{
  "status": "fail",
  "message": "Gagal memperbarui catatan. Id catatan tidak ditemukan"
}


## KRITERIA 4 ## (Delete)

path ‘/notes/{id}’ dengan method ‘DELETE'

response 200{
  "status": "success",
  "message": "Catatan berhasil dihapus"
}

jika id tidak ada 404{
  "status": "fail",
  "message": "Catatan gagal dihapus. Id catatan tidak ditemukan"
}


## STRUKTUR ##
server.js : Memuat kode untuk membuat, mengonfigurasi, dan menjalankan server HTTP menggunakan Hapi.
routes.js : Memuat kode konfigurasi routing server seperti menentukan path, method, dan handler yang digunakan.
handler.js : Memuat seluruh fungsi-fungsi handler yang digunakan pada berkas routes.
notes.js : Memuat data notes yang disimpan dalam bentuk array objek.

notes-app-back-end
├── node_modules
├── src
│ ├── handler.js
│ ├── notes.js
│ ├── routes.js
│ └── server.js
├── .eslintrc.json
├── package-lock.json
└── package.json